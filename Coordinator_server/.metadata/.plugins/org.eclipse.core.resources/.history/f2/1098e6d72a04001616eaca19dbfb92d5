package threads;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;

public class Client_Thread implements Runnable {

	private Socket clientSocket;
	private InputStreamReader streamReader;
	private OutputStreamWriter streamWriter;
	private BufferedReader bufferedReader;
	private boolean execute;
	
	/**
	*Constructor for the Client_Thread class that receives the socket and attempts to create 
	*the Input and Output streams for receiving and sending messages
	*
	* @author  Felipe Izepe
	* @version 1.0
	* @since   2016-04-16 
	* @param Socket - Web socket of the client that enables the communication
	* @throws
	*/
	public Client_Thread(Socket clientSocket) throws IOException {
		this.execute = true;
		this.clientSocket = clientSocket;
		this.streamReader = new InputStreamReader(clientSocket.getInputStream());
		this.streamWriter = new OutputStreamWriter(clientSocket.getOutputStream());
	}
	
	
	/**
	*The thread listens for client communication attempts
	*
	* @author  Felipe Izepe
	* @version 1.0
	* @since   2016-04-16 
	*/
	@Override
	public void run() {
		bufferedReader = new BufferedReader(streamReader); // get the client message
		String message;
		while(execute){
			
			try {
				message = bufferedReader.readLine();
				System.out.println(message + "\n");
			} catch (IOException e) {
				streamReader.close();
				streamWriter.close();
				clientSocket.close();
			}
			
		}
		
		try {
			streamReader.close();
			streamWriter.close();
			clientSocket.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
	}
	
	/**
	*attempts to sends a message to the client
	*
	* @author  Felipe Izepe
	* @version 1.0
	* @since   2016-04-16 
	* @param   message - message to be sent
	* @return  True if the message was send successfully and false otherwise
	*/
	public boolean sendMessage(String message)
	{
		BufferedWriter bufferWriter = new BufferedWriter(streamWriter);
		try {
			bufferWriter.write(message);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	/**
	* Ends the communication with the client and finishes the thread
	*
	* @author  Felipe Izepe
	* @version 1.0
	* @since   2016-04-16 
	*/
	public void endConnection()
	{
		this.execute = false;
	}

}
